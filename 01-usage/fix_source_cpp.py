import lldb
import time

def	fix(debugger, command, result, internal_dict):
	av = command.split()
	if len(av) == 3:
		debugger.SetAsync(True)
		debugger.HandleCommand("br s -n main")
		debugger.HandleCommand("process launch")
		time.sleep(1)
		debugger.HandleCommand("w s v count")
		debugger.HandleCommand("c")
		time.sleep(1)
		debugger.HandleCommand("c")
		time.sleep(1)
		debugger.GetSelectedTarget().GetProcess().PutSTDIN(str(av[0] + "\n"))
		time.sleep(1)
		debugger.HandleCommand("expr -- tab[0] = tab[1]")
		debugger.HandleCommand("c")
		time.sleep(1)
		debugger.GetSelectedTarget().GetProcess().PutSTDIN(str(av[1] + "\n"))
		time.sleep(1)
		debugger.HandleCommand("expr int $tmp = tab[1]")
		debugger.HandleCommand("c")
		time.sleep(1)
		debugger.GetSelectedTarget().GetProcess().PutSTDIN(str(av[2] + "\n"))
		time.sleep(1)
		debugger.HandleCommand("expr -- tab[2] = tab[1]; tab[1] = $tmp")
		debugger.HandleCommand("c")
		time.sleep(1)
		debugger.HandleCommand("expr -- count--")
		debugger.HandleCommand("w delete 1")
		time.sleep(1)
		debugger.HandleCommand("br s -p 'tmp /= max'")
		debugger.HandleCommand("c")
		time.sleep(1)
		debugger.HandleCommand("expr -- for(int i = 0; i < max; i++) tmp += min[i]")
		debugger.HandleCommand("br s -p 'return biggest'")
		debugger.HandleCommand("c")
		time.sleep(1)
		debugger.HandleCommand("expr -- for(int i = 0; i < max; i++) if(biggest < min[i]) biggest = min[i]")
		debugger.HandleCommand("c")
		time.sleep(2)
	else:
		print('usage: fix_source_cpp nbr1 nbr2 nbr3')

def	__lldb_init_module(debugger, internal_dict):
	debugger.HandleCommand('command script add -f fix_source_cpp.fix fix_source_cpp -h "fix the file source.cpp in 01-usage"')
